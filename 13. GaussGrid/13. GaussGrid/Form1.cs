// Программа для решения системы линейных уравнений. Ввод коэффициентов предусмотрен через DataGridView 

using System.Data;
using System.Globalization;

namespace _13._GaussGrid
{
    public partial class Form1 : Form
    {
        // Данные переменные объявляем вне всех процедур, чтобы они были видны из любой из процедур:
        int n; // размерность системы линейных алгебраических уравнений (СЛАУ)
        DataTable Таблица;
        
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            this.Text = "Решение системы уравнений";
            textBox1.TabIndex = 0;
            dataGridView1.Visible = false; // сетку данных пока не видно 
            label1.Text = "Введите количество неизвестных:";
            button1.Text = "Ввести"; // — первоначальная надпись на кнопке 
            Таблица = new DataTable();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            int i, j;
            // Матрица коэффициентов линейных уравнений: 
            Double[,] A;
            // Вектор свободных членов: 
            Double[] L;
            // Признак ввода числовых данных: 
            var Число_ли = false;
            
            var tmp = "временная рабочая переменная";
            if (button1.Text == "Ввести")
                for (; ; )
                {
                    // Бесконечный цикл, пока пользователь не введет 
                    // именно число: 
                    Число_ли = int.TryParse(textBox1.Text,
                                            NumberStyles.Integer,
                                            NumberFormatInfo.CurrentInfo,
                                            out n);
                    if (Число_ли == false) return;
                    // Задаем другую надпись на кнопке: 
                    button1.Text = "Решить";
                    // Теперь уже текстовое поле недоступно: 
                    textBox1.Enabled = false;
                    // Теперь уже сетку данных видно: 
                    dataGridView1.Visible = true;
                    dataGridView1.DataSource = Таблица;
                    // Создаем "шапку" таблицы 
                    for (i = 1; i <= n; i++)
                    {
                        tmp = "X" + Convert.ToString(i);
                        Таблица.Columns.Add(new DataColumn(tmp));
                    }
                    // Колонка правой части системы: 
                    Таблица.Columns.Add(new DataColumn("L"));
                    return;
                } // — конец тела вечного цикла 
            else  // — button1.Text = "Решить" 
            {   // Нажали кнопку "Решить" 
                // Таблица.Rows.Count — количество рядов 
                if (Таблица.Rows.Count != n)
                {
                    MessageBox.Show(
                        "Количество строк не равно количеству колонок");
                    return;
                }
                // Теперь можем определиться с размерностью массивов: 
                // Матрица коэффициентов линейных уравнений: 
                A = new Double[n, n];
                // Вектор свободных членов: 
                L = new Double[n];
                // Заполнение матрицы коэффициентов системы A[j, i] 
                for (j = 0; j <= n - 1; j++) 
                {
                    for (i = 0; i <= n - 1; i++) 
                    {
                        A[j, i] = ВернутьЧисло(j, i, ref Число_ли);
                        if (Число_ли == false) return;
                    } // — конец тела внутреннего цикла по i 
                    // Правая часть системы B[j, 0] 
                    L[j] = ВернутьЧисло(j, i, ref Число_ли);
                    if (Число_ли == false) return;
                } // — конец тела внешнего цикла по j 
            } // — button1.Text = "Решить" 
            // ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ 
            // Решение системы A*x = L методом Гаусса: 
            gauss(n, A, ref L);
            // L — вектор свободных членов системы, сюда 
            // же возвращается решение x 
            var s = "Неизвестные равны:\n";
            for (j = 1; j <= n; j++)
            {
                tmp = L[j - 1].ToString();
                s = s + "X" + j.ToString() + " = " + tmp + ";\n";
            } // — конец цикла по j 
            MessageBox.Show(s);
        }
        
        Double ВернутьЧисло(int j, int i, ref Boolean Число_ли)
        {
            // j — номер строки, i — номер столбца 
            // Передаем аргумент Число_ли по ссылке 
            Double rab; // — рабочая переменная 
            var tmp = Таблица.Rows[j][i].ToString();
            Число_ли = Double.TryParse(tmp,
                       NumberStyles.Number,
                       NumberFormatInfo.CurrentInfo,
                       out rab);
            if (Число_ли == false)
            {
                tmp = String.Format("Номер строки {0}, номер столбца " +
                    "{1}," + "\n в данном поле — не число", j + 1, i + 1);
                MessageBox.Show(tmp);
            }
            return rab;
        }

        void gauss(int n, double[,] A, ref double[] LL)
        {
            // n  — размер матрицы 
            // A  — матрица коэффициентов линейных уравнений 
            // LL — правая часть, сюда же возвращаются значения неизвестных 
            int i, j, l = 0;
            Double c1, c2, c3;
            for (i = 0; i <= n - 1; i++) // Цикл по элементам строки 
            {
                c1 = 0;
                for (j = i; j <= n - 1; j++) 
                {
                    c2 = A[j, i];
                    if (Math.Abs(c2) > Math.Abs(c1))
                    {
                        l = j; c1 = c2;
                    }
                }

                for (j = i; j <= n - 1; j++) 
                {
                    c3 = A[l, j] / c1;
                    A[l, j] = A[i, j]; A[i, j] = c3;
                } // j 

                c3 = LL[l] / c1; LL[l] = LL[i]; LL[i] = c3;
                for (j = 0; j <= n - 1; j++) 
                {
                    if (j == i) continue;
                    for (l = i + 1; l <= n - 1; l++) 
                    {
                        A[j, l] = A[j, l] - A[i, l] * A[j, i];
                    } 
                    LL[j] = LL[j] - LL[i] * A[j, i];
                }
            }
        }
    }
}


// Как следует из кода, при начальной загрузке программы пользователь не видит (Visible = false) сетку данных, а первоначальная надпись на кнопке — "Ввести".
// При щелчке на кнопке, если пользователь корректно ввел количество неизвестных, меняем надпись на кнопке (она теперь будет — "Решить"), по количеству
// неизвестных подготавливаем "шапку" таблицы и размерность сетки данных, куда пользователь будет вводить коэффициенты линейных уравнений и свободные члены.
// После ввода коэффициентов и щелчка на кнопке Решить происходит проверка количества введенных рядов коэффициентов и проверка на нечисловые символы. После этого
// вызывается процедура решения СЛАУ методом Гаусса gauss, т. е. методом последовательного исключения неизвестных. В основе процедуры gauss — цикл for по элементам
// строки матрицы системы. В этот внешний цикл вложены три внутренних цикла по строкам матрицы. После вызова процедуры gauss формируется строковая переменная s 
// для визуализации значений неизвестных. Переменная s выводится посредством диалогового окна MessageBox.
// Данная программа не предусматривает проверку на вырожденность СЛАУ, однако в этом случае в качестве значений неизвестных пользователь получает либо "бесконечность",
// либо константу NaN, значение которой является результатом деления на ноль. Программа не предусматривает ограничение сверху на размерность решаемой системы и должна
// работать при любой разумной размерности. Работа программы должна быть ограничена лишь размером оперативной памяти. Если количество неизвестных равно одному, то
// программа также нормально функционирует. 